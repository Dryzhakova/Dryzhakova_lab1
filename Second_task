#Task 2
# Розробити функцію, яка приймає список списків однакової довжини
# (двомірний масив) та параметр k. Функція сортує масив за заданим
# параметром k стовпцем. Використати lambda-функції.
# Вхід: [[1, 3, 3], [2, 1, 2], [3, 2, 1]]
# Вихід:
# Відсортовано за стовпцем 0, [[1, 3, 3], [2, 1, 2], [3, 2, 1]]
# Відсортовано за стовпцем 1, [[2, 1, 2], [3, 2, 1], [1, 3, 3]]
# Відсортовано за стовпцем 2, [[3, 2, 1], [2, 1, 2], [1, 3, 3]]
# Вхід: array = [[‘java’, 1995], [‘c++’, 1983], [‘python’, 1989]]
# Вихід:
# Відсортовано за стовпцем 0, [[‘c++’, 1983], [‘java’, 1995], [‘python’, 1989]]
# Відсортовано за стовпцем 1, [[‘c++’, 1983], [‘python’, 1989], [‘java’, 1995]].

from nbpep8.nbpep8 import pep8

#состоит из одного выражения (Возвращаемое значение — значение, которому присвоена функция.)
#лямбда-выражение позволяет создавать анонимные функции - функции, 
#которые не привязаны к имени. В анонимной функции: может содержаться только 
#одно выражение могут передаваться сколько угодно аргументов

def sort(*text_dictionary, k):
    return sorted(*text_dictionary, key = lambda x: x[k]) # використувуємо лямбда-функцію

text_dictionary = [1, 3, 3], [2, 1, 2], [3, 2, 1]
first_sort = sort(text_dictionary, k=0)
second_sort = sort(text_dictionary, k=1)
third_sort = sort(text_dictionary, k=2)
print(first_sort)
print(second_sort)
print(third_sort)

text_dictionary = [['java', 1995], ['c++', 1983], ['python', 1989]]
print(sort(text_dictionary, k = 0))
print(sort(text_dictionary, k = 1))

pep8(_ih)
